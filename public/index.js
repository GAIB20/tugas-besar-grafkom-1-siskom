/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/buffer.ts":
/*!***********************!*\
  !*** ./src/buffer.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProgram = exports.createShader = exports.bindBuffers = exports.initBuffers = void 0;
var vertexBuffer = null;
var colorBuffer = null;
var coordinatesLocation = -1;
var colorLocation = -1;
var initBuffers = function (gl) {
    vertexBuffer = gl.createBuffer();
    if (!vertexBuffer) {
        console.error("Failed to create vertex buffer");
        return;
    }
    colorBuffer = gl.createBuffer();
    if (!colorBuffer) {
        console.error("Failed to create color buffer");
        return;
    }
    var colorData = [
        1.0, 0.0, 0.0, // Red
        0.0, 1.0, 0.0, // Green
        0.0, 0.0, 1.0 // Blue
    ];
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colorData), gl.STATIC_DRAW);
    var error = gl.getError();
    if (error !== gl.NO_ERROR) {
        console.error("WebGL error during buffer initialization:", error);
    }
    console.log("Buffers initialized successfully");
};
exports.initBuffers = initBuffers;
var bindBuffers = function (gl, shaderProgram) {
    if (!shaderProgram) {
        console.error("Shader program is not initialized");
        return;
    }
    gl.useProgram(shaderProgram);
    coordinatesLocation = gl.getAttribLocation(shaderProgram, "a_position");
    colorLocation = gl.getAttribLocation(shaderProgram, "a_color");
    console.log("Coordinates Location:", coordinatesLocation);
    console.log("Color Location:", colorLocation);
    if (coordinatesLocation === -1 || colorLocation === -1) {
        console.error("Attribute locations not found in shader program");
        return;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    gl.vertexAttribPointer(coordinatesLocation, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(coordinatesLocation);
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    gl.vertexAttribPointer(colorLocation, 3, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(colorLocation);
};
exports.bindBuffers = bindBuffers;
var createShader = function (gl, type, source) {
    var shader = gl.createShader(type);
    if (shader) {
        gl.shaderSource(shader, source);
        gl.compileShader(shader);
        var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
        if (!success) {
            console.error("Shader compilation failed:", gl.getShaderInfoLog(shader));
            gl.deleteShader(shader);
            return null;
        }
        return shader;
    }
    return null;
};
exports.createShader = createShader;
var createProgram = function (gl, vtxShd, frgShd) {
    var program = gl.createProgram();
    if (program) {
        gl.attachShader(program, vtxShd);
        gl.attachShader(program, frgShd);
        gl.linkProgram(program);
        var success = gl.getProgramParameter(program, gl.LINK_STATUS);
        if (!success) {
            console.error("Program linking failed:", gl.getProgramInfoLog(program));
            gl.deleteProgram(program);
            return null;
        }
        return program;
    }
    return null;
};
exports.createProgram = createProgram;


/***/ }),

/***/ "./src/draw.ts":
/*!*********************!*\
  !*** ./src/draw.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getMousePosition = exports.drawObject = exports.drawPolygonImpl = exports.drawRectangleImpl = exports.drawSquareImpl = exports.drawLineImpl = exports.initDrawObject = void 0;
var nothing = false;
var drawLine = false;
var drawSquare = false;
var drawRectangle = false;
var resizing = false;
var drawPolygon = false;
var vertexPolygon = [];
var vertexBuffer = null;
var colorBuffer = null;
var numVerticesToDraw = 0;
var clickedVertices = [];
var initDrawObject = function (object, numVertices) {
    switch (object) {
        case "line":
            nothing = false;
            drawLine = true;
            drawSquare = false;
            drawRectangle = false;
            drawPolygon = false;
            resizing = false;
            break;
        case "square":
            nothing = false;
            drawLine = false;
            drawSquare = true;
            drawRectangle = false;
            drawPolygon = false;
            resizing = false;
            break;
        case "rectangle":
            nothing = false;
            drawLine = false;
            drawSquare = false;
            drawRectangle = true;
            drawPolygon = false;
            resizing = false;
            break;
        case "polygon":
            nothing = false;
            drawLine = false;
            drawSquare = false;
            drawRectangle = false;
            drawPolygon = true;
            resizing = false;
            numVerticesToDraw = numVertices || 3;
            clickedVertices = [];
            break;
        case "resize":
            nothing = false;
            drawLine = false;
            drawSquare = false;
            drawRectangle = false;
            drawPolygon = false;
            resizing = true;
            break;
    }
    return object;
};
exports.initDrawObject = initDrawObject;
var drawLineImpl = function (gl, startX, startY, endX, endY, color) {
    var vertices = [
        startX, startY,
        endX, endY
    ];
    console.log("Drawing line with vertices:", vertices);
    console.log("Drawing line with color:", color);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    if (!vertexBuffer) {
        console.error("Vertex is not initialized");
        return;
    }
    if (colorBuffer) {
        console.error("color buffer is not initialized");
        return;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);
    if (gl.getError() !== gl.NO_ERROR) {
        console.error("Failed to bind vertex buffer");
        return;
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, colorBuffer);
    if (gl.getError() !== gl.NO_ERROR) {
        console.error("Failed to bind color buffer");
        return;
    }
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(color), gl.STATIC_DRAW);
    gl.drawArrays(gl.LINES, 0, 2);
    console.log("Drawn line.");
};
exports.drawLineImpl = drawLineImpl;
var drawSquareImpl = function (gl, startX, startY, endX, endY) {
    var halfWidth = (endX - startX) / 2;
    var halfHeight = (endY - startY) / 2;
    var vertices = [
        startX, startY,
        startX + halfWidth, startY,
        startX + halfWidth, startY + halfHeight,
        startX, startY + halfHeight
    ];
    console.log("Drawing square with vertices:", vertices);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    console.log("Drawn square.");
};
exports.drawSquareImpl = drawSquareImpl;
var drawRectangleImpl = function (gl, startX, startY, endX, endY) {
    var vertices = [
        startX, startY,
        endX, startY,
        endX, endY,
        startX, endY
    ];
    console.log("Drawing rectangle with vertices:", vertices);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    gl.drawArrays(gl.TRIANGLE_FAN, 0, 4);
    console.log("Drawn rectangle.");
};
exports.drawRectangleImpl = drawRectangleImpl;
var drawPolygonImpl = function (gl, vertices) {
    console.log("Drawing polygon with vertices:", vertices);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
    gl.drawArrays(gl.LINE_LOOP, 0, vertices.length / 2);
    console.log("Drawn polygon.");
};
exports.drawPolygonImpl = drawPolygonImpl;
var drawObject = function (gl, shaderProgram, startX, startY, endX, endY) {
    if (!shaderProgram) {
        console.error("Shader program is not initialized");
        return;
    }
    gl.useProgram(shaderProgram);
    if (drawLine) {
        //  mouse click coordinates
        (0, exports.drawLineImpl)(gl, startX, startY, endX, endY, [1.0, 0.0, 0.0]);
    }
    else if (drawSquare) {
        (0, exports.drawSquareImpl)(gl, startX, startY, endX, endY);
    }
    else if (drawRectangle) {
        (0, exports.drawRectangleImpl)(gl, startX, startY, endX, endY);
    }
    else if (drawPolygon) {
        if (clickedVertices.length < numVerticesToDraw) {
            clickedVertices.push(startX, startY);
            if (clickedVertices.length === numVerticesToDraw * 2) {
                (0, exports.drawPolygonImpl)(gl, clickedVertices);
            }
        }
    }
    else {
        console.error("Invalid draw mode");
        return;
    }
    var primitiveType = gl.TRIANGLES;
    var offset = 0;
    var count = 3;
    gl.drawArrays(primitiveType, offset, count);
};
exports.drawObject = drawObject;
function getMousePosition(canvas, event) {
    var rect = canvas.getBoundingClientRect();
    return {
        x: ((event.clientX - rect.left) / canvas.width) * 2 - 1,
        y: -((event.clientY - rect.top) / canvas.height) * 2 + 1,
    };
}
exports.getMousePosition = getMousePosition;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
var draw_1 = __webpack_require__(/*! ./draw */ "./src/draw.ts");
var buffer_1 = __webpack_require__(/*! ./buffer */ "./src/buffer.ts");
var startClick = null;
var currentDrawMode = null;
var init = function () {
    var canvas = document.getElementById('c');
    var gl = canvas.getContext('webgl');
    if (!gl) {
        alert('Your browser does not support webGL');
        return;
    }
    (0, buffer_1.initBuffers)(gl);
    var vtxShaderSource = document.getElementById('vertex-shader-2d').text;
    var fragShaderSource = document.getElementById('fragment-shader-2d').text;
    var vertexShader = (0, buffer_1.createShader)(gl, gl.VERTEX_SHADER, vtxShaderSource);
    var fragmentShader = (0, buffer_1.createShader)(gl, gl.FRAGMENT_SHADER, fragShaderSource);
    if (!vertexShader || !fragmentShader)
        return;
    var program = (0, buffer_1.createProgram)(gl, vertexShader, fragmentShader);
    if (!program)
        return;
    // Bind buffers
    (0, buffer_1.bindBuffers)(gl, program);
    // Event listeners
    var lineBtn = document.getElementById('line-btn');
    if (lineBtn) {
        lineBtn.addEventListener('click', function () {
            console.log('Line button clicked');
            currentDrawMode = 'line';
            (0, draw_1.initDrawObject)(currentDrawMode);
        });
    }
    var squareBtn = document.getElementById('square-btn');
    if (squareBtn) {
        squareBtn.addEventListener('click', function () {
            currentDrawMode = 'square';
            (0, draw_1.initDrawObject)(currentDrawMode);
        });
    }
    var rectangleBtn = document.getElementById('rectangle-btn');
    if (rectangleBtn) {
        rectangleBtn.addEventListener('click', function () {
            currentDrawMode = 'rectangle';
            (0, draw_1.initDrawObject)(currentDrawMode);
        });
    }
    var polygonBtn = document.getElementById('polygon-btn');
    var verticesInput = document.getElementById('vertices-input');
    if (polygonBtn && verticesInput) {
        polygonBtn.addEventListener('click', function () {
            currentDrawMode = 'polygon';
            var numVertices = parseInt(verticesInput.value);
            (0, draw_1.initDrawObject)(currentDrawMode, numVertices);
        });
    }
    canvas.addEventListener('click', function (event) {
        if (currentDrawMode) {
            var mousePos = (0, draw_1.getMousePosition)(canvas, event);
            if (!startClick) {
                startClick = mousePos;
            }
            else {
                (0, draw_1.drawObject)(gl, program, startClick.x, startClick.y, mousePos.x, mousePos.y);
                startClick = null;
            }
        }
    });
};
init();

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,